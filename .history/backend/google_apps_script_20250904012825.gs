const SHEET_NAME='BaseCSV';const SOURCE_CSV_URL='REPLACE_WITH_RAW_GITHUB_CSV_URL';
function _getSS(){return SpreadsheetApp.getActiveSpreadsheet()}function _getBaseSheet(){const ss=_getSS();let sh=ss.getSheetByName(SHEET_NAME);if(!sh){sh=ss.insertSheet(SHEET_NAME)}return sh}
function initializeFromCsv(){if(!SOURCE_CSV_URL||SOURCE_CSV_URL.startsWith('REPLACE_')){throw new Error('Set SOURCE_CSV_URL before running initializeFromCsv()')}const resp=UrlFetchApp.fetch(SOURCE_CSV_URL,{muteHttpExceptions:true});if(resp.getResponseCode()!==200){throw new Error('Failed to fetch CSV: '+resp.getContentText())}const text=resp.getContentText();const lines=text.split(/\r?\n/).filter(l=>l.trim().length);const header=lines[0].split(',');const rows=lines.slice(1).map((line,i)=>{const parsed=_parseCsvLine(line);parsed.push(String(i));return parsed});const sh=_getBaseSheet();sh.clear();const headerPlus=header.slice();headerPlus.push('_row_index');sh.getRange(1,1,1,headerPlus.length).setValues([headerPlus]);if(rows.length>0){sh.getRange(2,1,rows.length,headerPlus.length).setValues(rows)}}
function _parseCsvLine(line){const out=[];let cur='',inQ=false;for(let i=0;i<line.length;i++){const c=line[i];if(c=='"'){inQ=!inQ}else if(c==','&&!inQ){out.push(cur);cur=''}else cur+=c}out.push(cur);return out.map(s=>s.replace(/^"|"$/g,''))}
function doGet(e){const sh=_getBaseSheet();const data=sh.getDataRange().getValues();if((e&&e.parameter&&e.parameter.format==='csv')){const out=[];const header=data[0];const cols=header.length-1;for(let r=0;r<data.length;r++){const row=data[r].slice(0,cols).map(v=>{const s=(v==null?'':String(v));return s.includes(',')?`"${s.replace(/"/g,'""')}"`:s});out.push(row.join(','))}return ContentService.createTextOutput(out.join('\n')).setMimeType(ContentService.MimeType.CSV).setHeader('Access-Control-Allow-Origin','*')}return ContentService.createTextOutput(JSON.stringify({ok:true,rows:data.length-1})).setMimeType(ContentService.MimeType.JSON).setHeader('Access-Control-Allow-Origin','*')}
function doPost(e){try{const body=e.postData&&e.postData.contents?e.postData.contents:'{}';const data=JSON.parse(body);const sh=_getBaseSheet();const values=sh.getDataRange().getValues();const header=values[0];const rows=values.slice(1);const nCols=header.length;const last3=data.csv_last3_indexes;if(!Array.isArray(last3)||last3.length!==3){throw new Error('csv_last3_indexes must be [iA,iB,iC]')}const iA=last3[0]+1,iB=last3[1]+1,iC=last3[2]+1;const patientKey=data.patient_key;const csvRowIndex=data.patient_index;const idxPatientId=header.indexOf('patient_id');const idxRowIdx=header.length-1;let rowNumber=-1;if(patientKey!=null&&idxPatientId>=0){for(let r=0;r<rows.length;r++){if(String(rows[r][idxPatientId])===String(patientKey)){rowNumber=r+1;break}}}if(rowNumber<0&&(csvRowIndex!=null)){for(let r=0;r<rows.length;r++){if(String(rows[r][idxRowIdx])===String(csvRowIndex)){rowNumber=r+1;break}}}if(rowNumber<0){throw new Error('Row not found for patient_key='+patientKey+' or index='+csvRowIndex)}const col1=data.answers?.col1??'';const col2=data.answers?.col2??'';const col3=data.answers?.col3??'';const range=sh.getRange(rowNumber+1,1,1,nCols);const rowVals=range.getValues()[0];rowVals[iA-1]=col1;rowVals[iB-1]=col2;rowVals[iC-1]=col3;range.setValues([rowVals]);return ContentService.createTextOutput(JSON.stringify({ok:true})).setMimeType(ContentService.MimeType.JSON).setHeader('Access-Control-Allow-Origin','*')}catch(err){return ContentService.createTextOutput(JSON.stringify({ok:false,error:String(err)})).setMimeType(ContentService.MimeType.JSON).setHeader('Access-Control-Allow-Origin','*')}}